% NOTES:
% The following main script was designed to clean and process dry rsEEG and 
% ERP data from the KBB Project. Only the 'CONFIGURATION NEEDED' section
% needs to be modified when this script is used on a separate computer. 
% For this script to work, you must have MATLAB along with useful toolboxes
% (will be specified later) and R. This code will generate several
% directories- all that is needed in the beginning is GitHub and a
% RAW_FOLDER directory- the other directories should be generated by the
% code alone.


%%%%%%%%%%%%%%%%%%%% CONFIGURATION NEEDED %%%%%%%%%%%%%%%%%%%%%
% Set a KBB pathway - this is one of the few pathaways that changes across
% PCs
KBB = 'C:\Users\KBB DATA ENTRY\Documents\';

% Set up information for R
rExecutable = '"C:\Program Files\R\R-4.3.1\bin\Rscript.exe"';
%LibraryDir = 'C:\Users\lledesma.TIMES\AppData\Local\Programs\R\R-4.2.2\library';
LibraryDir = 'C:\Users\KBB DATA ENTRY\AppData\Local\R\win-library\4.5';

% Set pathway to run EEGLAB
EEGLAB_Path = append(KBB, 'MATLAB\eeglab_current\eeglab2024.0');
addpath(EEGLAB_Path)
eeglab

% Set Pathway to KBB main scoring functions
EEGFUN_path = append(KBB, 'GitHub\EEG\EEG_Cleaning\dry_ERP');
EEGFUN2_path = append(KBB, 'GitHub\EEG\EEG_Cleaning\dry_rsEEG');
EEGFUN3_path = append(KBB, 'GitHub\EEG\generalfun');
EEGFUN4_path = append(KBB, 'GitHub\KBB\Preprocessing');
Functions_path = append(KBB, 'GitHub\KBB\Preprocessing\GeneralFunctions\');
GenFunctions_path = append(KBB, 'GitHub\KBB\Scoring\');
addpath(EEGFUN_path)
addpath(EEGFUN2_path)
addpath(EEGFUN3_path)
addpath(EEGFUN4_path)
addpath(GenFunctions_path)
addpath(Functions_path)


%%%%%%%%%% Copy Files from the Server to the Local PC %%%%%%%%%%%%%%%

% Set up parameters
%EEG_Type = {'.eeg', '.vhdr', '.vmrk'};
%EEG_Pathway = 'C:\Users\lledesma\Documents\KBB\Data\RAW_DATA\01_Eyes_Open_Inscapes\';
%EEG_save_path = 'C:\Users\lledesma\Documents\KBB\Data\MODIFIED_DS\01_Eyes_Open_Inscapes\';

% Copy and paste over the files
%copy_paste_EEG_files(EEG_Type, EEG_Pathway, EEG_save_path)

%%%%%%%%%%%%%%%%%%%%%%%% Clean the rsEEG data %%%%%%%%%%%%%%%%%%%%%%%
% Load in the dry-EEG preprocessing parameters (works for rsEEG and ERP)
rsEEGParameters 

% Set up some parameters for each condition
rawRepDir = {'01_Eyes_Open_Inscapes\', '02_Eyes_Closed\'}; % RAW_DATA and REPORT
cleanrsEEGDir = {'01_Eyes_Open_Inscapes\01_Cleaned_EEG_Data\',...  % MODIFIED_DS
                     '02_Eyes_Closed\01_Cleaned_EEG_Data\'}; 

for ii = 1:length(cleanrsEEGDir)

    % Set up pathways 
    EEG_Pathway = append(KBB, 'KBB\Data\RAW_DATA\', rawRepDir{ii});
    EEG_save_path = append(KBB, 'KBB\Data\MODIFIED_DS\', cleanrsEEGDir{ii});
    EEG_csv_save_path = append(KBB, 'KBB\Data\REPORTS\', rawRepDir{ii});
    batchSize = 15; 

    % Generate the folders (if they already exists then nothing happens)
    mkdir(EEG_save_path);
    mkdir(EEG_csv_save_path);

    % Load in .vhdr files in the Raw folder
    eegFiles = load_EEG_names(EEG_Pathway,'.vhdr','no');

    % filter bad EEG names and produce warning
    [eegFiles, errorMessage] = filter_bad_EEG_names(eegFiles, {'_EO.vhdr', '_EC.vhdr'})

    % Load in already processed files and remove them from eegFiles
    processed_eegFiles = load_EEG_names(EEG_save_path,'.set','no');
    eegFiles = eegFiles(~ismember(eegFiles, replace(processed_eegFiles, '_cleaned_dry.set','.vhdr')));

    % Clean the EEG data with the set parameters
    clean_dry_rseeg(eegFiles, ...
        EEG_Pathway, ...
        EEG_save_path , ...
        EEG_csv_save_path, ...
        preprocParams, ...
        batchSize)
end 


%%%%%%%%%%%%%%%%%%%%%%% Running Welch %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Runs custom welch function on clean EEG data
% Save the information into a separate directory (creates it if not
% available)

% Set directories to where the cleaned rsEEG data is (from above)
% cleanrsEEGDir

% Set directories to where the welch output will be saved
WelchDestination = {'01_Eyes_Open_Inscapes\02_Welch_Outcomes\',...
                   '02_Eyes_Closed\02_Welch_Outcomes\'};

% Set directories to where the channel, hz, and power data will be saved
chhzpwrDestination = {'01_Eyes_Open_Inscapes\03_Spectrum_Data_for_Plotting\',...
                     '02_Eyes_Closed\03_Spectrum_Data_for_Plotting\'};

for ii = 1:length(cleanrsEEGDir)
    
    % Set up pathways 
    inputdir = append(KBB, 'KBB\Data\MODIFIED_DS\', cleanrsEEGDir{ii});  
    outputdir = append(KBB, 'KBB\Data\MODIFIED_DS\', WelchDestination{ii});
    outputdir2 = append(KBB, 'KBB\Data\MODIFIED_DS\', chhzpwrDestination{ii});

    % Set up more parameters for extract_eeg_freqband_power_welchx
    bands = {'delta', 'theta', 'alpha', 'beta'};  
    frexvc = [1, 4; 4, 8; 8, 13; 13, 30];  % [start, end] Hz for each band
    setfiles = dir(fullfile(inputdir, '*.set'));  
    filenames = {setfiles.name};  
    winsec = 2;
    nOverlap_per = 50;
    outputname = "_struct_welchx2.mat";
    
    % Generate the folders (if they already exists then nothing happens)
    mkdir(outputdir);
    mkdir(outputdir2);

    % Run FPpowelchx - will create structs with welchx2 output for all files
    extract_eeg_freqband_power_welchx(bands, frexvc, inputdir, filenames, winsec, nOverlap_per, outputdir, outputdir2, outputname)
end

%%%%%%%%%%%%%%% Plotting Power Spectrum Figures %%%%%%%%%%%%%%%%%%%%%%%%%%
% This is being done through an .R script that we are calling here
% Additionally inputs from MATLAB will appear in .R Global Environment

% .R script location
rScript = append(KBB, 'GitHub\KBB\Preprocessing\GeneratingrsEEGPlots.R');

% Inputs that will be loaded within .R script
PlotDir = {'01_Eyes_Open_Inscapes\04_Plotted_Spectrum\',...
           '02_Eyes_Closed\04_Plotted_Spectrum\'};

for ii = 1:length(PlotDir)

    % Set up pathways
    inputdir = append(KBB, 'KBB\Data\MODIFIED_DS\', chhzpwrDestination{ii});  
    outputdir = append(KBB, 'KBB\Data\MODIFIED_DS\', PlotDir{ii});

    % Convert the forward slashes into back slashes
    LibraryDir = strrep(LibraryDir, '\', '/');
    currentSpecDatDir = strrep(inputdir, '\', '/');
    currentPlotDir = strrep(outputdir, '\', '/');

    % Generate the folders (if they already exists then nothing happens)
    mkdir(currentPlotDir); 
    
    % Construct the command with the pathway as an argument
    command = sprintf('%s %s "%s" "%s" "%s"', ... 
                      rExecutable, ...
                      rScript, ...
                      LibraryDir,...
                      currentSpecDatDir,...
                      currentPlotDir);
    
    % Call the R script
    [status, cmdout] = system(command);
    if status == 0
        disp('rsEEG plots were generated successfully');
    else
        disp('Error running R script');
        disp(cmdout);
    end
end

%%%%%% Creating topography x frequency band output table (Wide .csv) %%%%%%

% Set directories to where the top, Hz, wide dataset will be saved
topHzWideDestination = {'01_Eyes_Open_Inscapes\05_Final_FFT_Welch_CSVs\',...
                        '02_Eyes_Closed\05_Final_FFT_Welch_CSVs\'};

% Specify the name of the final top, Hz, wide dataset
topHzWideFileName = {'EO_topographyFBAvgPowWelch.csv',...
                     'EC_topographyFBAvgPowWelch.csv'};

for ii = 1:length(WelchDestination)

    % Load all Welch method .mat files
    inputdir = append(KBB, 'KBB\Data\MODIFIED_DS\', WelchDestination{ii});
    outputdir = append(KBB, 'KBB\Data\MODIFIED_DS\', topHzWideDestination{ii});
    filename = topHzWideFileName{ii};
    
    % Load in all saved .\mat files
    matfiles = dir(fullfile(inputdir, '*welchx2.mat'));
    awelchx = loadStructs2(inputdir, matfiles);
    
    % Following Whitford 2007
    % Must manually introduce what topography and channels to average by
    nbchanstruct = struct();
    nbchanstruct.frontal = {'Fp1', 'Fp2', 'F7', 'F3', 'Fz', 'F4', 'F8', 'FC3', 'FCz', 'FC4'};
    nbchanstruct.temporal = {'T7', 'TP7', 'T8', 'TP8'};
    nbchanstruct.parietal = {'CP3', 'CPz', 'CP4', 'P3', 'Pz', 'P4'};
    nbchanstruct.occipital = {'O1', 'Oz', 'O2'};
    
    % Frequency bands that we are interested in
    FB_spectral_properties = {'absdelta', 'abstheta', 'absalpha', 'absbeta',...
                              'avgdelta', 'avgtheta', 'avgalpha', 'avgbeta',...
                              'reldelta', 'reltheta', 'relalpha', 'relbeta'};
    
    % Generate the folders (if they already exists then nothing happens)
    mkdir(outputdir)
    
    % Obtain a table with avg power for frequency bands and topography
    topographyFBAvgPowWelch = topoFBpow(awelchx, nbchanstruct, FB_spectral_properties);

    % Save the FFT and Welch Output
    writetable(topographyFBAvgPowWelch, append(outputdir, filename));

end



%%%%%%%%%%%%%%%%%%%%%%%% Clean the ERP data %%%%%%%%%%%%%%%%%%%%%%%
% Set up some parameters for each ERP condition
rawRepDir2 = {'03_MMN_Inscapes\', '04_CPT_Inscapes\'}; % RAW_DATA and REPORT
cleanERPDir = {'03_MMN_Inscapes\01_Cleaned_ERP_Data\',...  % MODIFIED_DS
                     '04_CPT_Inscapes\01_Cleaned_ERP_Data\'}; 

for ii = 1:length(cleanERPDir)

    % Pick which parameters to read in
    if ii == 1
        MMNParameters
    else
        CPTParameters
    end

    % Set up pathways 
    EEG_Pathway = append(KBB, 'KBB\Data\RAW_DATA\', rawRepDir2{ii});
    EEG_save_path = append(KBB, 'KBB\Data\MODIFIED_DS\', cleanERPDir{ii});
    EEG_csv_save_path = append(KBB, 'KBB\Data\REPORTS\', rawRepDir2{ii});
    batchSize = 15; 

    % Generate the folders (if they already exists then nothing happens)
    mkdir(EEG_save_path);
    mkdir(EEG_csv_save_path);

    % Load in .vhdr files in the Raw folder
    eegFiles = load_EEG_names(EEG_Pathway,'.vhdr','no');

    % filter bad EEG names and produce warning
    [eegFiles, errorMessage] = filter_bad_EEG_names(eegFiles, {'_MMN.vhdr', '_CPT.vhdr'})

    % Load in already processed files and remove them from eegFiles
    processed_eegFiles = load_EEG_names(EEG_save_path,'.set','no');
    eegFiles = eegFiles(~ismember(eegFiles, replace(processed_eegFiles, '_cleaned_dry.set','.vhdr')));


    % Clean the EEG data with the set parameters (THIS FOR ERPS)
    clean_dry_erp(eegFiles, ...
        EEG_Pathway, ...
        EEG_save_path , ...
        EEG_csv_save_path, ...
        preprocParams, ...
        batchSize)
end 


%%%%%%%%%%%%%%%%%%%%% Generate ERPs for the MMN %%%%%%%%%%%%%%%%%%%%%%%

% Set up pathways 
EEG_Pathway = append(KBB, 'KBB\Data\MODIFIED_DS\', cleanERPDir{1});
EEG_Bin_Path = append(KBB, 'KBB\Data\MODIFIED_DS\03_MMN_Inscapes\02_Bin_Information\');
EEG_ERP_csv_save_path = append(KBB, 'KBB\Data\MODIFIED_DS\03_MMN_Inscapes\03_ERP_CSVs\');

% Set up parameters
MMN_filenames = load_EEG_names(EEG_Pathway ,'.set', 'no');
EEG_Bin_Name = 'MMN_Bin.txt';

% Generate the folders (if they already exists then nothing happens)
mkdir(EEG_Bin_Path);
mkdir(EEG_ERP_csv_save_path);

parfor ii = 1:length(MMN_filenames)
    current_MMN_filename = MMN_filenames{ii};
    % Extract the correct ERPs and save them as a .csv
    MMN_ProcessingERP(current_MMN_filename, EEG_Pathway, EEG_Bin_Path, EEG_Bin_Name, EEG_ERP_csv_save_path)

end

%%%%%%%%%%%%%%%%%%%% Plotting the MMN ERPs %%%%%%%%%%%%%%%%%%%%%%%

% This is being done through an .R script that we are calling here
% Additionally inputs from MATLAB will appear in .R Global Environment

% .R script location
rScript2 = append(KBB, 'GitHub\KBB\Preprocessing\GeneratingMMNPlots.R');

% Inputs that will be loaded within .R script
PlotDir2 = '03_MMN_Inscapes\04_Plotted_MMN\';

% Set up pathways
inputdir = append(KBB, 'KBB\Data\MODIFIED_DS\03_MMN_Inscapes\03_ERP_CSVs\');  
outputdir = append(KBB, 'KBB\Data\MODIFIED_DS\', PlotDir2);

% Convert the forward slashes into back slashes
LibraryDir = strrep(LibraryDir, '\', '/');
currentSpecDatDir = strrep(inputdir, '\', '/');
currentPlotDir = strrep(outputdir, '\', '/');

% Generate the folders (if they already exists then nothing happens)
mkdir(outputdir);

% Construct the command with the pathway as an argument
command = sprintf('%s %s "%s" "%s" "%s"', ... 
                  rExecutable, ...
                  rScript2, ...
                  LibraryDir,...
                  currentSpecDatDir,...
                  currentPlotDir);

% Call the R script
[status, cmdout] = system(command);
if status == 0
    disp('MMN plots were generated successfully');
else
    disp('Error running R script');
    disp(cmdout);
end


%%%%%%%%%%%%%%%%%%%%% Generate ERPs for the CPT %%%%%%%%%%%%%%%%%%%%%%%

% Set up pathways 
EEG_Pathway = append(KBB, 'KBB\Data\MODIFIED_DS\', cleanERPDir{2});
EEG_Bin_Path = append(KBB, 'KBB\Data\MODIFIED_DS\04_CPT_Inscapes\02_Bin_Information\');
EEG_ERP_csv_save_path = append(KBB, 'KBB\Data\MODIFIED_DS\04_CPT_Inscapes\03_ERP_CSVs\');

% Set up parameters
CPT_filenames = load_EEG_names(EEG_Pathway ,'.set', 'no');
EEG_Bin_Name = 'CPT_Bin.txt';

% Generate the folders (if they already exists then nothing happens)
mkdir(EEG_Bin_Path);
mkdir(EEG_ERP_csv_save_path);

parfor ii = 1:length(CPT_filenames)
    current_CPT_filename = CPT_filenames{ii};
    % Extract the correct ERPs and save them as a .csv
    CPT_ProcessingERP(current_CPT_filename, EEG_Pathway, EEG_Bin_Path, EEG_Bin_Name, EEG_ERP_csv_save_path)

end


%%%%%%%%%%%%%%%%%%%% Plotting the CPT ERPs %%%%%%%%%%%%%%%%%%%%%%%

% This is being done through an .R script that we are calling here
% Additionally inputs from MATLAB will appear in .R Global Environment

% .R script location
rScript3 = append(KBB, 'GitHub\KBB\Preprocessing\GeneratingCPTPlots.R');

% Inputs that will be loaded within .R script
PlotDir3 = '04_CPT_Inscapes\04_Plotted_CPT\';

% Set up pathways
inputdir = append(KBB, 'KBB\Data\MODIFIED_DS\04_CPT_Inscapes\03_ERP_CSVs\');  
outputdir = append(KBB, 'KBB\Data\MODIFIED_DS\', PlotDir3);

% Convert the forward slashes into back slashes
LibraryDir = strrep(LibraryDir, '\', '/');
currentSpecDatDir = strrep(inputdir, '\', '/');
currentPlotDir = strrep(outputdir, '\', '/');

% Generate the folders (if they already exists then nothing happens)
mkdir(outputdir);

% Construct the command with the pathway as an argument
command = sprintf('%s %s "%s" "%s" "%s"', ... 
                  rExecutable, ...
                  rScript3, ...
                  LibraryDir,...
                  currentSpecDatDir,...
                  currentPlotDir);

% Call the R script
[status, cmdout] = system(command);
if status == 0
    disp('CPT plots were generated successfully');
else
    disp('Error running R script');
    disp(cmdout);
end



%%%%%%%%%%%%% Combining Individual Reports into Main Ones %%%%%%%%%%%%%%%%%%
% Create an array to store the main_QC_Dry_name
main_QC_dry_name = {};

% Set parameters
Destinations = [rawRepDir rawRepDir2];

for ii = 1:length(Destinations)
    % Setting pathways to where reports are saved for each task 
    Name = replace(Destinations{ii},'\','');
    EEG_csv_save_path = append(KBB, 'KBB\Data\REPORTS\', Destinations{ii});
    main_QC_dry_name{ii} = append(KBB, 'KBB\Data\REPORTS\', Name, '.xlsx');
     
    % Load in QC Reports and Bind Them Into One File
    T1 = organizing_QC(EEG_csv_save_path, 'dryEEG.csv');
    T2 = struct2log(preprocParams);
    
    % Save the table as an Excel file
    writetable(T1, main_QC_dry_name{ii});
    writecell(T2, main_QC_dry_name{ii}, 'Sheet', 'Sheet2');
end


%%%%%%%%%%%% Categorize Recordings as Good or Bad %%%%%%%%%%%%%%%%
% Create arrays to keep the outputs
Good_Recordings_raw = {};
Bad_Recordings_raw = {};
Quality = {};

for ii = 1:length(main_QC_dry_name)
    % Read in the main QC excel  
    current_main_QC_dry = readtable(main_QC_dry_name{ii});
    
    % Set parameters
    BadChnThres = 5;
    ASRIntrpThres = .30;
    AvgAmp2Thres = 500;
    
    % Identify the good and bad files 
    [Good_Recordings_raw{ii}, Bad_Recordings_raw{ii}, Quality{ii}] = check_dry_EEG_Quality(current_main_QC_dry, BadChnThres, ASRIntrpThres, AvgAmp2Thres);

end


% Combine all good quality recordings 
nonEmptyGood   = Good_Recordings_raw(~cellfun('isempty',Good_Recordings_raw)); 
All_Good_recordings   = vertcat(nonEmptyGood{:});

% Combine all the bad quality recordings 
nonEmptyBad   = Bad_Recordings_raw(~cellfun('isempty',Bad_Recordings_raw)); 
All_Bad_recordings   = vertcat(nonEmptyBad{:});

%%%%%%%%% Create a Comprehensive Table of Good and Bad Recordings %%%%%
% Pool lists & tag them 
allFiles   = [All_Good_recordings ; All_Bad_recordings];
isGoodFlag = [true(size(All_Good_recordings)); false(size(All_Bad_recordings))];   % 1 = good, 0 = bad

% Pull out the ID and the task from each filename
n = numel(allFiles);
IDs   = strings(n,1);
tasks = strings(n,1);

for k = 1:n
    noExt        = erase(allFiles{k},'.vhdr');       % drop extension
    lastUnders   = find(noExt=='_',1,'last');
    IDs(k)       = extractBefore(noExt, lastUnders); % e.g. '0919'
    tasks(k)     = extractAfter(noExt, lastUnders);  % e.g. 'MMN'
end

% create the empty table (rows = IDs, cols = task types)
taskNames  = ["EO","EC","MMN","CPT"];
uniqueIDs  = unique(IDs, 'stable');                  % keep original order
tbl = array2table( nan(numel(uniqueIDs), numel(taskNames)), ...
                   'VariableNames', taskNames, ...
                   'RowNames',     cellstr(uniqueIDs) );
for k = 1:n
    r = find(uniqueIDs == IDs(k));
    c = find(taskNames == tasks(k));
    tbl{r,c} = double(isGoodFlag(k));                % 1 = good, 0 = bad
end
disp(tbl)

% Save the output
tbl_name = 'Main_QS_Report.xlsx';
writetable(tbl, append(KBB, 'KBB\Data\REPORTS\', tbl_name), 'WriteRowNames', true);

